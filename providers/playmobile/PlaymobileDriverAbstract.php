<?php

namespace jakharbek\sms\providers\playmobile;

use jakharbek\sms\dto\sendSmsResponseDTO;
use jakharbek\sms\exceptions\smsHasNotBeenSentException;
use jakharbek\sms\interfaces\SmsSenderInterface as SmsSenderInterfaceAlias;
use jakharbek\sms\models\Sms;
use GuzzleHttp\Client;
use yii\base\Component;
use yii\helpers\Json;

abstract class PlaymobileDriverAbstract extends Component implements SmsSenderInterfaceAlias
{
    private $config = array();
    private $client;
    const ACCESS_POINT_URI = 'http://91.204.239.42:8083/broker-api';

    /**
     * PlaymobileDriverAbstract constructor.
     * @param Client $client
     * @param array $config
     */
    public function __construct(Client $client, array $config = array())
    {
        $this->client = $client;
        parent::__construct($config);
    }

    public function init()
    {
        $this->connection();

        parent::init(); // TODO: Change the autogenerated stub
    }

    public function connection()
    {
        $auth = array($this->getUsername(), $this->getPassword());

        $this->config = array(
            'auth'    => $auth,
            'headers' => [
                'Content-Type' => 'application/json'
            ]
        );
    }

    /**
     * @param $phone
     * @param $msg
     * @return bool
     */
    public function sendSms($phone, $msg): sendSmsResponseDTO
    {
        $phone = preg_replace("#[^0-9]#", null, $phone);
        $message_id = (int)(microtime(true)*100);
        $originator = $this->getOriginator();
        $config = $this->config;

        $config['body'] = Json::encode(array(
            'messages' => array(
                array(
                    'recipient'  => $phone,
                    'message-id' => $message_id,
                    'sms'        => array(
                        'originator' => $originator,
                        'content'    => array(
                            'text' => $msg
                        )
                    )
                ),
            )
        ));

        try {
            $this->request("send", $config);
            $this->log($phone, $this->getOriginator(), $msg, "smsSent", $message_id);

        } catch (\Exception $exception) {
            $this->log($phone, $this->getOriginator(), $msg, "error;SmsSent;" . $exception->getMessage(), $message_id,0);
            throw new smsHasNotBeenSentException($exception->getMessage());
        }

        $dto = new sendSmsResponseDTO();
        $dto->phone = $phone;
        $dto->msg = $msg;
        $dto->id = $message_id;

        return $dto;
    }

    /**
     * @throws \GuzzleHttp\Exception\GuzzleException
     */
    private function request($method, $options = [])
    {
        return $this->client->request('POST', self::ACCESS_POINT_URI . "/" . $method, $options);
    }

    /**
     * @return mixed
     */
    public abstract function getUsername();

    /**
     * @return mixed
     */
    public abstract function getPassword();

    /**
     * @return mixed
     */
    public abstract function getOriginator();

    public function isDelivered($id): bool
    {
        $config = $this->config;

        $config['body'] = Json::encode(
            array(
                'message-id' => [$id],
            )
        );

        try {
            $response = Json::decode($this->request("get-status", $config));
            if ($response['status'] == "delivered") {
                return true;
            }
        } catch (\Exception $exception) {
            echo $exception->getMessage();
            exit();
        }
        return false;
    }

    public function log($recipient, $sender, $message, $log, $message_id,$status = 1)
    {

        $sms = new Sms();
        $sms->recipient = $recipient;
        $sms->sender = $sender;
        $sms->message = $message;
        $sms->log = $log;
        $sms->message_id = $message_id;
        $sms->status = $status;
        $sms->save();
    }


}
